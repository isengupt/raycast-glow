{"version":3,"sources":["Scene.js","shaders/vertex.js","shaders/fragment.js","App.js","index.js"],"names":["Scene","props","setupResize","window","addEventListener","resize","a1","a2","width","container","offsetWidth","height","offsetHeight","renderer","setSize","camera","aspect","console","log","imageAspect","material","uniforms","resolution","value","x","y","z","w","dist","position","fov","Math","PI","atan","plane","scale","updateProjectionMatrix","start","bind","stop","animate","this","scene","THREE","setClearColor","physicallyCorrectLights","outputEncoding","document","getElementById","mount","clientWidth","clientHeight","appendChild","domElement","set","controls","OrbitControls","time","addObjects","mouseEvents","mouse","that","event","clientX","innerWidth","clientY","innerHeight","extensions","derivatives","side","type","uvRate1","vertexShader","fragmentShader","geometry","add","removeChild","frameId","requestAnimationFrame","cancelAnimationFrame","renderScene","render","id","ref","Component","App","className","href","ReactDOM","StrictMode"],"mappings":"wPA4KeA,E,kDArKb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAiFRC,YAAc,WACZC,OAAOC,iBAAiB,SAAU,EAAKC,SAnFtB,EAsFnBA,OAAS,WASP,IAAIC,EACAC,EATJ,EAAKC,MAAQ,EAAKC,UAAUC,YAC5B,EAAKC,OAAS,EAAKF,UAAUG,aAC7B,EAAKC,SAASC,QAAQ,EAAKN,MAAO,EAAKG,QACvC,EAAKI,OAAOC,OAAS,EAAKR,MAAQ,EAAKG,OACvCM,QAAQC,IAAI,UAEV,EAAKC,YAAc,EAKjB,EAAKR,OAAS,EAAKH,MAAQ,EAAKW,aAClCb,EAAM,EAAKE,MAAQ,EAAKG,OAAU,EAAKQ,YACvCZ,EAAK,IAELD,EAAK,EACLC,EAAK,EAAKI,OAAS,EAAKH,MAAQ,EAAKW,aAGvC,EAAKC,SAASC,SAASC,WAAWC,MAAMC,EAAI,EAAKhB,MACjD,EAAKY,SAASC,SAASC,WAAWC,MAAME,EAAI,EAAKd,OACjD,EAAKS,SAASC,SAASC,WAAWC,MAAMG,EAAIpB,EAC5C,EAAKc,SAASC,SAASC,WAAWC,MAAMI,EAAIpB,EAE5C,IAAMqB,EAAO,EAAKb,OAAOc,SAASH,EAElC,EAAKX,OAAOe,IAAU,IAAIC,KAAKC,GAAb,EAAmBD,KAAKE,KAD3B,GACwC,EAAEL,IAErD,EAAKpB,MAAQ,EAAKG,OAAS,EAC7B,EAAKuB,MAAMC,MAAMX,EAAI,EAAKT,OAAOC,OAEjC,EAAKkB,MAAMC,MAAMV,EAAI,EAAI,EAAKV,OAAOC,OAGvC,EAAKD,OAAOqB,yBACZnB,QAAQC,IAAI,EAAKH,SAvHjB,EAAKsB,MAAQ,EAAKA,MAAMC,KAAX,gBACb,EAAKC,KAAO,EAAKA,KAAKD,KAAV,gBACZ,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBALE,E,gEAQjBG,KAAKC,MAAQ,IAAIC,IACjBF,KAAK5B,SAAW,IAAI8B,IAEpBF,KAAK5B,SAAS+B,cAAc,QAC5BH,KAAK5B,SAASC,QAAQ2B,KAAKjC,MAAOiC,KAAK9B,QACvC8B,KAAK5B,SAASgC,yBAA0B,EACxCJ,KAAK5B,SAASiC,eAAiBH,IAE/BF,KAAKhC,UAAYsC,SAASC,eAAe,SACzCP,KAAKjC,MAAQiC,KAAKQ,MAAMC,YACxBT,KAAK9B,OAAS8B,KAAKQ,MAAME,aACzBV,KAAKQ,MAAMG,YAAYX,KAAK5B,SAASwC,YAErCZ,KAAK1B,OAAS,IAAI4B,IAChB,GACAF,KAAKjC,MAAQiC,KAAK9B,OAClB,GACA,KAGF8B,KAAK1B,OAAOc,SAASyB,IAAI,EAAG,EAAG,GAC/Bb,KAAKc,SAAW,IAAIC,IAAcf,KAAK1B,OAAQ0B,KAAK5B,SAASwC,YAE7DZ,KAAKgB,KAAO,EACZhB,KAAKvC,cACLuC,KAAKiB,aACLjB,KAAKD,UACLC,KAAKpC,SACLoC,KAAKkB,gB,oCAILlB,KAAKmB,MAAQ,IAAIjB,IACjB,IAAIkB,EAAOpB,KAaXtC,OAAOC,iBAAkB,aAZzB,SAAsB0D,GAKlBD,EAAKD,MAAMpC,EAAMsC,EAAMC,QAAU5D,OAAO6D,WAAe,EAAI,EAC3DH,EAAKD,MAAMnC,GAAQqC,EAAMG,QAAU9D,OAAO+D,YAAgB,EAAI,EAE9DL,EAAKzC,SAASC,SAASuC,MAAMrC,MAAQsC,EAAKD,SAIK,K,mCAKnDnB,KAAKrB,SAAW,IAAIuB,IAAqB,CACvCwB,WAAY,CACVC,YAAa,mDAEfC,KAAM1B,IACNtB,SAAU,CACRoC,KAAM,CAAEa,KAAM,IAAK/C,MAAO,GAC1BqC,MAAO,CAAEU,KAAM,KAAM/C,MAAO,IAAIoB,IAAc,EAAE,IAChDrB,WAAY,CAAEgD,KAAM,KAAM/C,MAAO,IAAIoB,KACrC4B,QAAS,CACPhD,MAAO,IAAIoB,IAAc,EAAG,KAGhC6B,aC/EW,6UDgFXC,eEhFa,6lGFmFfhC,KAAKiC,SAAW,IAAI/B,IAAoB,EAAG,EAAG,EAAG,GAEjDF,KAAKP,MAAQ,IAAIS,IAAWF,KAAKiC,SAAUjC,KAAKrB,UAChDqB,KAAKC,MAAMiC,IAAIlC,KAAKP,S,6CA+CpBO,KAAKF,OACLE,KAAKQ,MAAM2B,YAAYnC,KAAK5B,SAASwC,c,8BAIhCZ,KAAKoC,UACRpC,KAAKoC,QAAUC,sBAAsBrC,KAAKD,Y,6BAK5CuC,qBAAqBtC,KAAKoC,W,gCAI1BpC,KAAKgB,MAAQ,IACbhB,KAAKrB,SAASC,SAASoC,KAAKlC,MAAQkB,KAAKgB,KAEzChB,KAAKoC,QAAUC,sBAAsBrC,KAAKD,SAE1CC,KAAKuC,gB,oCAILvC,KAAK5B,SAASoE,OAAOxC,KAAKC,MAAOD,KAAK1B,U,+BAG9B,IAAD,OACP,OACI,qBACAmE,GAAG,QACHC,IAAK,SAAClC,GACJ,EAAKA,MAAQA,S,GA/JHmC,aG2BLC,MA9Bf,WACE,OACE,qCACA,sBAAKC,UAAU,QAAf,UACA,oBAAIA,UAAU,eAAd,iCACA,qBAAKA,UAAU,iBACf,sBAAKA,UAAU,aAAf,UACE,mBACEA,UAAU,cACVC,KAAK,4CAFP,sBAMA,mBAAGD,UAAU,cAAcC,KAAK,IAAhC,oBAGA,mBACED,UAAU,cACVC,KAAK,4CAFP,0BAQD,cAAC,EAAD,QCrBLC,IAASP,OACP,cAAC,IAAMQ,WAAP,UACE,cAAC,EAAD,MAEF1C,SAASC,eAAe,W","file":"static/js/main.90cfe400.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nimport { fragment } from \"./shaders/fragment\";\nimport { vertex } from \"./shaders/vertex\";\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n  }\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.renderer = new THREE.WebGLRenderer();\n\n    this.renderer.setClearColor(\"#000\");\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.physicallyCorrectLights = true;\n    this.renderer.outputEncoding = THREE.sRGBEncoding;\n\n    this.container = document.getElementById(\"scene\");\n    this.width = this.mount.clientWidth;\n    this.height = this.mount.clientHeight;\n    this.mount.appendChild(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      this.width / this.height,\n      0.1,\n      1000\n    );\n\n    this.camera.position.set(0, 0, 2);\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    this.time = 0;\n    this.setupResize();\n    this.addObjects();\n    this.animate();\n    this.resize();\n    this.mouseEvents();\n  }\n\n  mouseEvents() {\n    this.mouse = new THREE.Vector2();\n    let that = this;\n    function onMouseMove( event ) {\n\n        // calculate mouse position in normalized device coordinates\n        // (-1 to +1) for both components\n    \n        that.mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n        that.mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n\n        that.material.uniforms.mouse.value = that.mouse;\n    \n    }\n\n    window.addEventListener( 'mousemove', onMouseMove, false );\n  }\n\n  addObjects() {\n    let that = this;\n    this.material = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n        mouse: { type: \"v2\", value: new THREE.Vector2(0,0) },\n        resolution: { type: \"v4\", value: new THREE.Vector4() },\n        uvRate1: {\n          value: new THREE.Vector2(1, 1),\n        },\n      },\n      vertexShader: vertex,\n      fragmentShader: fragment,\n    });\n\n    this.geometry = new THREE.PlaneGeometry(1, 1, 1, 1);\n\n    this.plane = new THREE.Mesh(this.geometry, this.material);\n    this.scene.add(this.plane);\n  }\n\n  setupResize = () => {\n    window.addEventListener(\"resize\", this.resize);\n  };\n\n  resize = () => {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n    console.log(\"resize\");\n\n      this.imageAspect = 1;\n\n    let a1;\n    let a2;\n\n    if (this.height / this.width > this.imageAspect) {\n      a1 = (this.width / this.height) * this.imageAspect;\n      a2 = 1;\n    } else {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    }\n\n    this.material.uniforms.resolution.value.x = this.width;\n    this.material.uniforms.resolution.value.y = this.height;\n    this.material.uniforms.resolution.value.z = a1;\n    this.material.uniforms.resolution.value.w = a2;\n\n    const dist = this.camera.position.z;\n    const height = 1;\n    this.camera.fov = 2* (180/Math.PI) * Math.atan(height/(2*dist));\n\n    if (this.width / this.height > 1) {\n      this.plane.scale.x = this.camera.aspect;\n    } else {\n      this.plane.scale.y = 1 / this.camera.aspect;\n    } \n\n    this.camera.updateProjectionMatrix();\n    console.log(this.camera);\n  };\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  animate() {\n    this.time += 0.05;\n    this.material.uniforms.time.value = this.time;\n\n    this.frameId = requestAnimationFrame(this.animate);\n\n    this.renderScene();\n  }\n\n  renderScene() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  render() {\n    return (\n        <div\n        id=\"scene\"\n        ref={(mount) => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\n\nexport default Scene;\n","export var vertex = `\n\nuniform float time;\nvarying vec2 vUv;\nvarying vec3 vPosition;\nuniform sampler2D t; \n\nfloat PI = 3.141592653589793238;\n\nvoid main()\t{\n    vUv = uv;\n    vPosition = position;\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.);\n    gl_PointSize = 2.; \n    gl_Position = projectionMatrix * mvPosition;\n\n}\n`","export var fragment = `\n\nuniform float time;\nuniform float progress;\nuniform sampler2D texture1;\nuniform sampler2D texture2; \nuniform vec4 resolution;\nuniform vec2 mouse;\n\nvarying vec2 vUv;\nvarying vec3 vPosition;\nfloat PI = 3.141592653589793238;\n\nmat4 rotationMatrix(vec3 axis, float angle) {\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\nvec3 rotate(vec3 v, vec3 axis, float angle) {\n\tmat4 m = rotationMatrix(axis, angle);\n\treturn (m * vec4(v, 1.0)).xyz;\n}\n\nfloat sphere(vec3 p ) {\n    return length(p) -0.5;\n}\n\nfloat sdBox(vec3 p , vec3 b) {\n    vec3 q = abs(p) - b; \n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat SineCrazy (vec3 p) {\n    return 1. - (cos(p.x) + cos(p.y) + cos(p.z))/3.;\n}\n\nfloat scene(vec3 p) {\n    vec3 p1 = rotate(p, vec3(1.,1.,1.),time/4.);\n    //return sdBox(p1, vec3(0.5,0.5,0.5));\nfloat scale = 15. + 10. * sin(time/12.);\n    return max(sphere(p1), (0.85 - SineCrazy(p1*scale))/scale);\n\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 o = vec2(0.001,0.);\n\n    return normalize(\n        vec3(\n            scene(p + o.xyy) - scene(p - o.xyy),\n            scene(p + o.yxy) - scene(p - o.yxy),\n            scene(p + o.yyx) - scene(p - o.yyx)\n        )\n    );\n}\n\nvec3 GetColor(float amount) {\n    vec3 col = 0.5 + 0.5 * cos(6.28319 * (vec3(0.2,0.0,0.0) + amount * vec3(1.0,1.0,0.5)));\n    return col * amount;\n}\n\nvec3 GetColorAmount(vec3 p) {\n    float amount = clamp((1.5 - length(p))/2.,0.,1.);\n    vec3 col = 0.5 + 0.5 * cos(6.28319 * (vec3(0.2,0.0,0.0) + amount * vec3(1.0,1.0,0.5)));\n    return col * amount;\n}\n\n\nvoid main()\t{\n    vec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\n\n\n    vec2 p = newUV - vec2(0.5);\n\n    p.x += mouse.x*0.1;\n    p.y += mouse.y*0.1;\n\n\n\n    //float bw = step(newUV.y, 0.6);\n\n    vec3 camPos = vec3(0.,0.,2. + 0.5*sin(time/4.));\n\n    vec3 ray = normalize(vec3(p, -1.));\n\n    vec3 rayPos = camPos;\n\n    float curDist = 0.;\n    float rayLen = 0.;\n\n    vec3 light = vec3(-1.,1.,1.);\n\n    vec3 color  = vec3(0.);\n\n    for (int i =0; i<=64;i++) {\n        curDist = scene(rayPos);\n\n        rayLen += 0.6*curDist;\n\n        rayPos = camPos + ray*rayLen;\n\n        if(abs(curDist)<0.001 ) {\n            vec3 n = getNormal(rayPos);\n\n            float diff = dot(n,light)\n;\n\n//color = GetColor(diff);\n//color = GetColor(2. * length(rayPos));\nbreak;\n        }\n\n        color += 0.04 * GetColorAmount(rayPos);\n\n\n    }\n\n\n\n\n    gl_FragColor = vec4(color,1.);\n    gl_FragColor.r -= abs(mouse.x) * 0.1;\n}\n`;\n","import './App.css';\nimport Scene from './Scene'\n\nfunction App() {\n  return (\n    <>\n    <div className=\"frame\">\n    <h1 className=\"frame__title\">Shape Morphing Demo</h1>\n    <div className=\"frame__links\"></div>\n    <div className=\"frame__nav\">\n      <a\n        className=\"frame__link\"\n        href=\"https://isengupt.github.io/outward-lines/\"\n      >\n        Previous\n      </a>\n      <a className=\"frame__link\" href=\"#\">\n        Resume\n      </a>\n      <a\n        className=\"frame__link\"\n        href=\"https://github.com/isengupt/raycast-glow/\"\n      >\n        GitHub\n      </a>\n    </div>\n  </div>\n     <Scene/>\n     </>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}